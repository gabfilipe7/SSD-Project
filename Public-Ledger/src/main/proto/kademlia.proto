syntax = "proto3";

package com.kademlia.grpc;

option java_multiple_files = true;
option java_package = "com.kademlia.grpc";
option java_outer_classname = "KademliaProto";

service KademliaService {
  rpc Ping(PingRequest) returns (PingResponse);
  rpc FindNode(FindNodeRequest) returns (FindNodeResponse);
  rpc Store(StoreRequest) returns (StoreResponse);
  rpc FindValue(FindValueRequest) returns (FindValueResponse);
  rpc GossipTransaction(TransactionMessage) returns (GossipResponse);
  rpc GossipBlock(BlockMessage) returns (GossipResponse);
  rpc GetBlocksFrom (GetBlocksRequest) returns (GetBlocksResponse);
  rpc SendPaymentRequest(PaymentRequest) returns (PaymentRequestResponse);
  rpc GossipReputation (GossipReputationRequest) returns (GossipReputationResponse);
  rpc Pay (TransactionMessage) returns (GossipResponse);
}

message PingRequest {
  NodeInfo node = 1;
}

message PingResponse {
  bool is_alive = 1;
}

message FindNodeRequest {
  string target_id = 1;
}

message NodeInfo {
  string id = 1;
  string ip = 2;
  int32 port = 3;
}

message FindNodeResponse {
  repeated NodeInfo nodes = 1;
}

message StoreRequest {
  string key = 1;
  string value = 2;
  string src = 3;
}

enum StoreResponseType {
  UNKNOWN_TYPE_STORE = 0;
  LOCAL_STORE = 1;
  REMOTE_STORE = 2;
}

message StoreResponse {
  StoreResponseType response_type = 1;
}

message FindValueRequest {
  string key = 1;
}

message FindValueResponse {
  bool found = 1;
  repeated string value = 2;
  repeated NodeInfo nodes = 3;
}


message TransactionMessage {
  string transactionData = 1;
  bytes signature = 2;
  string senderNodeId  = 3;
}

message GossipResponse {
  bool success = 1;
}

message Block {
  int64 blockId = 1;
  string previousHash = 2;
  int64 timestamp = 3;
  repeated string transactions = 4;
  int64 nonce = 5;
  string hash = 6;
}

message BlockMessage {
  Block blockData = 1;
  bytes signature = 2;
  string senderId = 3;
}

message GetBlocksRequest {
  uint64 startIndex = 1;
}

message GetBlocksResponse {
  repeated BlockMessage blocks = 1;
}

message PaymentRequest {
  string auctionId = 1;
  string auctionOwnerId = 2;
  string auctionWinnerId = 3;
  double amount= 4;
}

message PaymentRequestResponse {
  bool success = 1;
}

message GossipReputationRequest {
  string reputationMessageId = 1;
  string senderId = 2;
  bytes senderPublicKey = 3;
  string nodeId = 4;
  double score = 5;
  int64 lastUpdated = 6;
  bytes signature = 7;
}

message GossipReputationResponse {
  bool accepted = 1;
}